[{"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\index.js":"1","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\App.js":"2","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Forms\\Form.js":"3","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\Posts.js":"4","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\Post\\Post.js":"5","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\styles.js":"6","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Forms\\styles.js":"7","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\styles.js":"8","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\Post\\styles.js":"9","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\atoms\\posts.js":"10","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\api\\index.js":"11","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Navbar\\Navbar.js":"12","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Navbar\\styles.js":"13","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Home\\Home.js":"14","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Home\\styles.js":"15","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Auth\\Auth.js":"16","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Auth\\styles.js":"17","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Auth\\Input.js":"18","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\atoms\\users.js":"19"},{"size":253,"mtime":1661215980047,"results":"20","hashOfConfig":"21"},{"size":834,"mtime":1661467481082,"results":"22","hashOfConfig":"21"},{"size":3790,"mtime":1661215360064,"results":"23","hashOfConfig":"21"},{"size":870,"mtime":1661216434983,"results":"24","hashOfConfig":"21"},{"size":2585,"mtime":1661216310095,"results":"25","hashOfConfig":"21"},{"size":469,"mtime":1660700215049,"results":"26","hashOfConfig":"21"},{"size":447,"mtime":1660002651327,"results":"27","hashOfConfig":"21"},{"size":278,"mtime":1660002696067,"results":"28","hashOfConfig":"21"},{"size":1013,"mtime":1660002676296,"results":"29","hashOfConfig":"21"},{"size":172,"mtime":1660601012584,"results":"30","hashOfConfig":"21"},{"size":829,"mtime":1661211357436,"results":"31","hashOfConfig":"21"},{"size":2341,"mtime":1661215949274,"results":"32","hashOfConfig":"21"},{"size":952,"mtime":1660758943649,"results":"33","hashOfConfig":"21"},{"size":1360,"mtime":1661215578262,"results":"34","hashOfConfig":"21"},{"size":469,"mtime":1660771714980,"results":"35","hashOfConfig":"21"},{"size":5524,"mtime":1661214862473,"results":"36","hashOfConfig":"21"},{"size":666,"mtime":1660776238806,"results":"37","hashOfConfig":"21"},{"size":1232,"mtime":1661214896564,"results":"38","hashOfConfig":"21"},{"size":101,"mtime":1661041451933,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"und78c",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"43"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\index.js",[],[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\App.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Forms\\Form.js",["103"],[],"import {React, useEffect, useState} from \"react\";\r\nimport {TextField, Button, Typography, Paper} from '@material-ui/core';\r\nimport useStyles from './styles.js';\r\nimport FileBase from 'react-file-base64';\r\nimport * as api from '../../api';\r\nimport {useRecoilState } from \"recoil\";\r\nimport { posts as p, currentId as curId} from \"../../atoms/posts.js\";\r\nimport { users } from \"../../atoms/users.js\";\r\n\r\n\r\nconst Form = () => {\r\n    const classes = useStyles();\r\n    const [postData,setPostData] = useState({\r\n        title:'', message:'', tags:'', selectedFile:''\r\n    });\r\n    \r\n    const [posts, setPosts] = useRecoilState(p);\r\n    const [currentId, setId] = useRecoilState(curId); \r\n    const Post = (currentId ? posts.find((p)=> p._id === currentId) :  null);\r\n    const [user, setUser] = useRecoilState(users)\r\n    \r\n    //Updates form if the currentId of a post is changed which is helpful for updating posts\r\n    useEffect(()=> {\r\n        if(Post) {setPostData(Post)};\r\n    },[Post]);\r\n\r\n    //If user is not logged in, prevent them from making posts\r\n    if(!user?.result?.name) {\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    Please Sign In to Create Events and interact with other events\r\n                </Typography>\r\n            </Paper>\r\n        )\r\n    }\r\n    const createPost = async(POSTS) => {\r\n        try {\r\n            const {data}  = await api.createPost(POSTS);\r\n            setPosts((posts) =>[...posts,data]);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    const updatePost = async(Id, post) => {\r\n        try {\r\n            const {data} = await api.updatePost(Id, post);\r\n            const pos = posts.map((Post) => Post?._id === data?._id ? data : Post);\r\n            setPosts(pos); \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const handleChange = (e) => {\r\n        setPostData({...postData, [e.target.name]: e.target.value});\r\n\r\n    };\r\n    const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            if(currentId === '') {\r\n                createPost({...postData, name:user?.result?.name });\r\n            } else {\r\n              updatePost(currentId, {...postData, name:user?.result?.name })\r\n            }\r\n            clear();\r\n    }\r\n    const clear = () => {\r\n        setId('');\r\n        setPostData({\r\n            title:'', message:'', tags:'', selectedFile:'',\r\n        })\r\n    }\r\n\r\n    return(\r\n           <Paper className={classes.paper}>\r\n               <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                   <Typography variant=\"h6\">{currentId ? 'Editing' : 'Creating'} a Event/Memory</Typography>\r\n                   <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={handleChange}/>\r\n                   <TextField name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth value={postData.message} onChange={handleChange}/>\r\n                   <TextField name=\"tags\" variant=\"outlined\" label=\"Tags\" fullWidth value={postData.tags} onChange={handleChange}/>\r\n                    <div className={classes.fileInput}>\r\n                        <FileBase type=\"file\" multiple={false} onDone={({base64}) => setPostData({...postData, selectedFile:base64})}/>\r\n                        <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n                        <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear}fullWidth>Clear</Button>\r\n                    </div>\r\n               </form>\r\n           </Paper> \r\n        )\r\n}\r\nexport default Form;","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\Posts.js",["104","105"],[],"import React from \"react\";\r\nimport Post from \"./Post/Post.js\";\r\nimport useStyles from './styles.js';\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { posts as p } from \"../../atoms/posts.js\";\r\nimport { Grid, CircularProgress } from \"@material-ui/core\";\r\nconst Posts = () => {\r\n    const classes = useStyles();\r\n    const [posts, changePosts] = useRecoilState(p);\r\n    console.log(posts);\r\n    return(\r\n        //If there are no posts, show a loading circle\r\n       !posts.length ? <CircularProgress/> : (\r\n           <Grid className={classes.container} container alignItems = \"stretch\" spacing = {3}>\r\n               {posts.map((post) =>(\r\n                   <Grid key = {post._id} item xs={12} sm={6}>\r\n                    <Post post = {post}/>\r\n                   </Grid>\r\n               ))}\r\n           </Grid>\r\n       ));\r\n}\r\nexport default Posts;","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\Post\\Post.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\styles.js",[],[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Forms\\styles.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\styles.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Posts\\Post\\styles.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\atoms\\posts.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\api\\index.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Navbar\\Navbar.js",["106"],[],"import {React, useEffect} from 'react';\r\nimport { AppBar, Avatar, Button, Toolbar, Typography } from '@material-ui/core';\r\nimport useStyles from './styles.js';\r\nimport { Link } from 'react-router-dom';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport { users} from '../../atoms/users.js';\r\nimport { useRecoilState } from 'recoil';\r\nimport { useLocation } from 'react-router-dom';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst Navbar = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const [user,setUser] = useRecoilState(users);\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.clear();\r\n        navigate('/')\r\n\r\n    }\r\n    useEffect(()=> {\r\n        const token = user?.token;\r\n        //Logout the user if the time is up\r\n        if(token) {\r\n            const decodedToken = jwt_decode(token);\r\n            if(decodedToken?.expiry_date * 1000 < new Date().getTime() || decodedToken?.exp*1000 < new Date().getTime()) logout();}\r\n        //reset user if logout or logged in\r\n        setUser(JSON.parse(localStorage.getItem('profile')));\r\n    },[location]);\r\n\r\n    return (\r\n        <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\r\n            <div className={classes.brandContainer}>\r\n                <Typography component={Link} to='/' className = {classes.heading} variant=\"h2\" align=\"center\">Memories/Events</Typography>\r\n            </div>\r\n            <Toolbar className={classes.toolbar}>\r\n                {user ? (\r\n                    <div className={classes.profile}>\r\n                        <Avatar className={classes.purple} alt = {user.result.name} src ={user.result.picture}>\r\n                            {user.result.name.charAt(0)}\r\n                        </Avatar>\r\n                        <Typography className={classes.userName} variant = 'h6'>{user.result.name}</Typography>\r\n                        <Button variant = \"contained\" className={classes.logout} color = \"secondary\" onClick={logout}>Logout</Button>\r\n                    </div>\r\n                ) : (\r\n                    <Button component = {Link} to= \"/auth\" variant = \"contained\" color = \"primary\" >Sign In</Button>    \r\n                )\r\n            }\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\nexport default Navbar;","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Navbar\\styles.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Home\\Home.js",["107","108"],[],"import {React, useEffect} from \"react\";\r\nimport { Grow, Grid} from '@material-ui/core';\r\nimport Form from '../Forms/Form.js';\r\nimport Posts from '../Posts/Posts.js';\r\nimport useStyles from './styles.js';\r\nimport * as api from '../../api';\r\nimport {  posts as p, currentId as Id } from \"../../atoms/posts.js\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nconst Home = () => {\r\n    const classes = useStyles();\r\n    const setPosts = useSetRecoilState(p);\r\n    const[curId,setId] = useRecoilValue(Id);\r\n    useEffect(() => {\r\n        //Gets posts everytime an action occurs\r\n         const GetPosts = async() => {\r\n    \r\n            try {\r\n                 var {data} = await api.fetchPosts();\r\n                setPosts(data);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n           \r\n        }\r\n        GetPosts();\r\n    }, [curId]);\r\n    return(\r\n        <Grow in>\r\n                <Grid container className = {classes.MainContainer} justifyContent =\"space between\" alignItems=\"stretch\" spacing={3}>\r\n                    <Grid item xs = {12} sm ={7}>\r\n                        <Posts/>\r\n                    </Grid>\r\n                    <Grid item xs = {12} sm ={4}>\r\n                        <Form/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grow>\r\n    )\r\n}\r\nexport default Home;\r\n","C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Home\\styles.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Auth\\Auth.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Auth\\styles.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\components\\Auth\\Input.js",[],[],"C:\\Users\\aarus\\work\\personal\\memories\\client\\src\\atoms\\users.js",[],[],{"ruleId":"109","severity":1,"message":"110","line":20,"column":18,"nodeType":"111","messageId":"112","endLine":20,"endColumn":25},{"ruleId":"109","severity":1,"message":"113","line":4,"column":26,"nodeType":"111","messageId":"112","endLine":4,"endColumn":40},{"ruleId":"109","severity":1,"message":"114","line":9,"column":19,"nodeType":"111","messageId":"112","endLine":9,"endColumn":30},{"ruleId":"115","severity":1,"message":"116","line":30,"column":7,"nodeType":"117","endLine":30,"endColumn":17,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"119","line":12,"column":17,"nodeType":"111","messageId":"112","endLine":12,"endColumn":22},{"ruleId":"115","severity":1,"message":"120","line":26,"column":8,"nodeType":"117","endLine":26,"endColumn":15,"suggestions":"121"},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","'useRecoilValue' is defined but never used.","'changePosts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logout', 'setUser', and 'user?.token'. Either include them or remove the dependency array.","ArrayExpression",["122"],"'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPosts'. Either include it or remove the dependency array.",["123"],{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [location, logout, setUser, user?.token]",{"range":"128","text":"129"},"Update the dependencies array to be: [curId, setPosts]",{"range":"130","text":"131"},[1149,1159],"[location, logout, setUser, user?.token]",[877,884],"[curId, setPosts]"]